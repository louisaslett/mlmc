[{"path":"https://mlmc.louisaslett.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Louis Aslett. Maintainer, author, translator. Mike Giles. Contributor. Tigran Nagapetyan. Contributor. Sebastian Vollmer. Contributor.","code":""},{"path":"https://mlmc.louisaslett.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Aslett L (2024). mlmc: Multi-Level Monte Carlo. R package version 2.0.0, https://github.com/louisaslett/mlmc, https://mlmc.louisaslett.com/.","code":"@Manual{,   title = {mlmc: Multi-Level Monte Carlo},   author = {Louis Aslett},   year = {2024},   note = {R package version 2.0.0, https://github.com/louisaslett/mlmc},   url = {https://mlmc.louisaslett.com/}, }"},{"path":"https://mlmc.louisaslett.com/index.html","id":"mlmc-r-package-","dir":"","previous_headings":"","what":"Multi-Level Monte Carlo","title":"Multi-Level Monte Carlo","text":"implementation Multi-level Monte Carlo R. package builds original GPL-2 Matlab C++ implementations Mike Giles (see https://people.maths.ox.ac.uk/~gilesm/mlmc/) provide full MLMC driver example level samplers. Multi-core parallel sampling levels provided built-.","code":""},{"path":"https://mlmc.louisaslett.com/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Multi-Level Monte Carlo","text":"Please feel free : submit suggestions bug-reports : https://github.com/louisaslett/mlmc/issues compose e-mail : louis.aslett@durham.ac.uk, nagapetyan@stats.ox.ac.uk vollmer@stats.ox.ac.uk","code":""},{"path":"https://mlmc.louisaslett.com/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Multi-Level Monte Carlo","text":"can install latest release directly CRAN. can install latest binary r-universe:","code":"install.packages(\"mlmc\") install.packages(\"mlmc\", repos = c(\"https://louisaslett.r-universe.dev\", \"https://cloud.r-project.org\"))"},{"path":"https://mlmc.louisaslett.com/index.html","id":"install-development-version-not-recommended","dir":"","previous_headings":"","what":"Install development version (not recommended)","title":"Multi-Level Monte Carlo","text":"Installing directly GitHub supported install.packages command. use devtools package install development version desired. releases, tree/commit CRAN releases made recorded, historic source can downloaded .","code":"install.packages(\"devtools\") devtools::install_github(\"louisaslett/mlmc\")"},{"path":"https://mlmc.louisaslett.com/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Multi-Level Monte Carlo","text":"Louis Aslett supported -like programme grant (EPSRC grant reference number EP/K014463/1 http://www.-like.org.uk) package first conceived. Tigran Nagapetyan Sebastian Vollmer supported EPSRC Grant EP/N000188/1.","code":""},{"path":"https://mlmc.louisaslett.com/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Multi-Level Monte Carlo","text":"use software, please cite: Aslett, L. J. M., Giles, M. B., Nagapetyan, T. Vollmer, S. J. (2016), mlmc: Multi-Level Monte Carlo. R package. https://CRAN.R-project.org/package=mlmc Thank-.","code":"@Manual{mlmcpkg,   title = {mlmc: Multi-Level Monte Carlo},   author = {Aslett, L. J. M. and Giles, M. B. and Nagapetyan, T. and Vollmer, S. J.},   year = {2016},   note = {R package},   url = {https://CRAN.R-project.org/package=mlmc}, }"},{"path":"https://mlmc.louisaslett.com/reference/mcqmc06_l.html","id":null,"dir":"Reference","previous_headings":"","what":"Financial options using a Milstein discretisation — mcqmc06_l","title":"Financial options using a Milstein discretisation — mcqmc06_l","text":"Financial options based scalar geometric Brownian motion, similar Mike Giles' MCQMC06 paper, using Milstein discretisation.","code":""},{"path":"https://mlmc.louisaslett.com/reference/mcqmc06_l.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Financial options using a Milstein discretisation — mcqmc06_l","text":"","code":"mcqmc06_l(l, N, option)"},{"path":"https://mlmc.louisaslett.com/reference/mcqmc06_l.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Financial options using a Milstein discretisation — mcqmc06_l","text":"l level simulated. N number samples computed. option option type, 1 5. options : 1 = European call;  2 = Asian call;  3 = lookback call;  4 = digital call;  5 = barrier call.","code":""},{"path":"https://mlmc.louisaslett.com/reference/mcqmc06_l.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Financial options using a Milstein discretisation — mcqmc06_l","text":"function based GPL-2 C++ code Mike Giles.","code":""},{"path":"https://mlmc.louisaslett.com/reference/mcqmc06_l.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Financial options using a Milstein discretisation — mcqmc06_l","text":"M.B. Giles. 'Improved multilevel Monte Carlo convergence using Milstein scheme', p.343-358 Monte Carlo Quasi-Monte Carlo Methods 2006, Springer, 2007.","code":""},{"path":"https://mlmc.louisaslett.com/reference/mcqmc06_l.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Financial options using a Milstein discretisation — mcqmc06_l","text":"Louis Aslett <louis.aslett@durham.ac.uk> Mike Giles <Mike.Giles@maths.ox.ac.uk>","code":""},{"path":"https://mlmc.louisaslett.com/reference/mcqmc06_l.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Financial options using a Milstein discretisation — mcqmc06_l","text":"","code":"if (FALSE) { # \\dontrun{ # These are similar to the MLMC tests for the MCQMC06 paper # using a Milstein discretisation with 2^l timesteps on level l # # The figures are slightly different due to: # -- change in MSE split # -- change in cost calculation # -- different random number generation # -- switch to S_0=100  M    <- 2 # refinement cost factor N0   <- 200 # initial samples on coarse levels Lmin <- 2 # minimum refinement level Lmax <- 10 # maximum refinement level  test.res <- list() for(option in 1:5) {   if(option==1) {     cat(\"\\n ---- Computing European call ---- \\n\")     N      <- 20000 # samples for convergence tests     L      <- 8 # levels for convergence tests     Eps    <- c(0.005, 0.01, 0.02, 0.05, 0.1)   } else if(option==2) {     cat(\"\\n ---- Computing Asian call ---- \\n\")     N      <- 20000 # samples for convergence tests     L      <- 8 # levels for convergence tests     Eps    <- c(0.005, 0.01, 0.02, 0.05, 0.1)   } else if(option==3) {     cat(\"\\n ---- Computing lookback call ---- \\n\")     N      <- 20000 # samples for convergence tests     L      <- 10 # levels for convergence tests     Eps    <- c(0.005, 0.01, 0.02, 0.05, 0.1)   } else if(option==4) {     cat(\"\\n ---- Computing digital call ---- \\n\")     N      <- 200000 # samples for convergence tests     L      <- 8 # levels for convergence tests     Eps    <- c(0.01, 0.02, 0.05, 0.1, 0.2)   } else if(option==5) {     cat(\"\\n ---- Computing barrier call ---- \\n\")     N      <- 200000 # samples for convergence tests     L      <- 8 # levels for convergence tests     Eps    <- c(0.005, 0.01, 0.02, 0.05, 0.1)   }    test.res[[option]] <- mlmc.test(mcqmc06_l, M, N, L, N0, Eps, Lmin, Lmax, option=option)    # plot results   plot(test.res[[option]]) } } # }  # The level sampler can be called directly to retrieve the relevant level sums: mcqmc06_l(l=7, N=10, option=1) #> $sums #> [1] 4.065939e-02 4.561184e-04 5.165569e-06 6.039214e-08 9.787067e+01 #> [6] 2.147454e+03 #>  #> $cost #> [1] 1280 #>"},{"path":"https://mlmc.louisaslett.com/reference/mlmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi-level Monte Carlo estimation — mlmc","title":"Multi-level Monte Carlo estimation — mlmc","text":"function Multi-level Monte Carlo driver sample levels user specified function.","code":""},{"path":"https://mlmc.louisaslett.com/reference/mlmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi-level Monte Carlo estimation — mlmc","text":"","code":"mlmc(   Lmin,   Lmax,   N0,   eps,   mlmc_l,   alpha = NA,   beta = NA,   gamma = NA,   parallel = NA,   ... )"},{"path":"https://mlmc.louisaslett.com/reference/mlmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi-level Monte Carlo estimation — mlmc","text":"Lmin minimum level refinement.  Must \\(\\ge 2\\). Lmax maximum level refinement.  Must \\(\\ge\\) Lmin. N0 initial number samples used first 3 levels subsequent levels automatically added. Must \\(> 0\\). eps target accuracy estimate (root mean square error). Must \\(> 0\\). mlmc_l user supplied function provides estimate level \\(l\\).        must take least two arguments, first level number simulated second number paths.        Additional arguments can taken desired: additional ... arguments function forwarded user defined mlmc_l function. user supplied function return named list containing one element named sums second named cost, : sums vector length two \\((\\sum Y_i, \\sum Y_i^2)\\) \\(Y_i\\) iid simulations expectation \\(E[P_0]\\) \\(l=0\\) expectation \\(E[P_l-P_{l-1}]\\) \\(l>0\\). cost scalar cost number paths simulated. See function (source code ) opre_l() package example user supplied level sampler. alpha weak error, \\(O(2^{-\\alpha l})\\). Must \\(> 0\\) specified. NA alpha estimated. beta variance, \\(O(2^{-\\beta l})\\). Must \\(> 0\\) specified. NA beta estimated. gamma sample cost, \\(O(2^{\\gamma l})\\). Must \\(> 0\\) specified. NA gamma estimated. parallel integer supplied, R fork parallel parallel processes compute level estimate parallel. ... additional arguments passed user supplied mlmc_l function called.","code":""},{"path":"https://mlmc.louisaslett.com/reference/mlmc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multi-level Monte Carlo estimation — mlmc","text":"list containing: P MLMC estimate; Nl vector number samples performed level; Cl Cost samples level.","code":""},{"path":"https://mlmc.louisaslett.com/reference/mlmc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multi-level Monte Carlo estimation — mlmc","text":"Multilevel Monte Carlo Method method originated works Giles (2008) Heinrich (1998). Consider sequence \\(P_0, P_1, \\ldots\\), approximates \\(P_L\\) increasing accuracy, also increasing cost, simple identity $$E[P_L] = E[P_0] + \\sum_{l=1}^L E[P_l-P_{l-1}],$$ therefore can use following unbiased estimator \\(E[P_L]\\), $$N_0^{-1} \\sum_{n=1}^{N_0} P_0^{(0,n)} + \\sum_{l=1}^L \\{ N_l^{-1} \\sum_{n=1}^{N_l} (P_l^{(l,n)} - P_{l-1}^{(l,n)}) \\}$$ inclusion level \\(l\\) superscript \\((l,n)\\) indicating samples used level correction independent. Set \\(C_0\\), \\(V_0\\) cost variance one sample \\(P_0\\), \\(C_l, V_l\\) cost variance one sample \\(P_l - P_{l-1}\\), overall cost variance multilevel estimator \\(\\sum_{l=0}^L N_l C_l\\) \\(\\sum_{l=0}^L N_l^{-1} V_l\\), respectively. idea behind method, provided product \\(V_l C_l\\) decreases \\(l\\), .e. cost increases level slower variance decreases, one can achieve significant computational savings, can formalised Theorem 1 Giles (2015). information multilevel Monte Carlo methods, see webpage https://people.maths.ox.ac.uk/gilesm/mlmc_community.html lists research groups working area, main publications. function based GPL-2 'Matlab' code Mike Giles.","code":""},{"path":"https://mlmc.louisaslett.com/reference/mlmc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Multi-level Monte Carlo estimation — mlmc","text":"M.B. Giles. Multilevel Monte Carlo path simulation. Operations Research, 56(3):607-617, 2008. M.B. Giles. Multilevel Monte Carlo methods. Acta Numerica, 24:259-328, 2015. S. Heinrich. Monte Carlo complexity global solution integral equations. Journal Complexity, 14(2):151-175, 1998.","code":""},{"path":"https://mlmc.louisaslett.com/reference/mlmc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Multi-level Monte Carlo estimation — mlmc","text":"Louis Aslett <louis.aslett@durham.ac.uk> Mike Giles <Mike.Giles@maths.ox.ac.uk> Tigran Nagapetyan <nagapetyan@stats.ox.ac.uk>","code":""},{"path":"https://mlmc.louisaslett.com/reference/mlmc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multi-level Monte Carlo estimation — mlmc","text":"","code":"mlmc(2, 6, 1000, 0.01, opre_l, gamma=1, option=1) #> $P #> [1] 10.44773 #>  #> $Nl #> [1] 4269479  355797  106626   30020 #>  #> $Cl #> [1]  1  4 16 64 #>   mlmc(2, 10, 1000, 0.01, mcqmc06_l, gamma=1, option=1) #> $P #> [1] 10.44739 #>  #> $Nl #> [1] 2963125   57853   27732    8114    2975    1056     424     172 #>  #> $Cl #> [1]   1   2   4   8  16  32  64 128 #>"},{"path":"https://mlmc.louisaslett.com/reference/mlmc.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi-level Monte Carlo estimation test suite — mlmc.test","title":"Multi-level Monte Carlo estimation test suite — mlmc.test","text":"Computes suite diagnostic values MLMC estimation problem.","code":""},{"path":"https://mlmc.louisaslett.com/reference/mlmc.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi-level Monte Carlo estimation test suite — mlmc.test","text":"","code":"mlmc.test(   mlmc_l,   N,   L,   N0,   eps.v,   Lmin,   Lmax,   parallel = NA,   silent = FALSE,   ... )"},{"path":"https://mlmc.louisaslett.com/reference/mlmc.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi-level Monte Carlo estimation test suite — mlmc.test","text":"mlmc_l user supplied function provides estimate level l N number samples use tests L number levels use tests N0 initial number samples used first 3 levels subsequent levels automatically added. Must \\(> 0\\). eps.v vector target accuracies tests. Must \\(> 0\\). Lmin minimum level refinement. Must \\(\\ge 2\\). Lmax maximum level refinement. Must \\(\\ge\\) Lmin. parallel integer supplied, R fork parallel parallel processes compute level estimate parallel. silent set TRUE supress running output (identical output can still printed printing return result) ... additional arguments passed user supplied mlmc_l function called","code":""},{"path":"https://mlmc.louisaslett.com/reference/mlmc.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multi-level Monte Carlo estimation test suite — mlmc.test","text":"mlmc.test object contains computed diagnostic values.         object can printed plotted (see plot.mlmc.test).","code":""},{"path":"https://mlmc.louisaslett.com/reference/mlmc.test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multi-level Monte Carlo estimation test suite — mlmc.test","text":"See one example level sampler functions (e.g. opre_l) example usage. function based GPL-2 'Matlab' code Mike Giles.","code":""},{"path":"https://mlmc.louisaslett.com/reference/mlmc.test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Multi-level Monte Carlo estimation test suite — mlmc.test","text":"Louis Aslett <louis.aslett@durham.ac.uk> Mike Giles <Mike.Giles@maths.ox.ac.uk> Tigran Nagapetyan <nagapetyan@stats.ox.ac.uk>","code":""},{"path":"https://mlmc.louisaslett.com/reference/mlmc.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multi-level Monte Carlo estimation test suite — mlmc.test","text":"","code":"if (FALSE) { # \\dontrun{ # Example calls with realistic arguments tst <- mlmc.test(opre_l, N=2000000,                  L=5, N0=1000,                  eps.v=c(0.005, 0.01, 0.02, 0.05, 0.1),                  Lmin=2, Lmax=6, option=1) tst plot(tst)  tst <- mlmc.test(mcqmc06_l, N=20000,                  L=8, N0=200,                  eps.v=c(0.005, 0.01, 0.02, 0.05, 0.1),                  Lmin=2, Lmax=10, option=1) tst plot(tst) } # }  # Toy versions for CRAN tests tst <- mlmc.test(opre_l, N=10000,                  L=5, N0=1000,                  eps.v=c(0.025, 0.1),                  Lmin=2, Lmax=6, option=1) #>  #> ********************************************************** #> *** Convergence tests, kurtosis, telescoping sum check *** #> *** using N = 10000 samples                            *** #> ********************************************************** #>  #>  l   ave(Pf-Pc)    ave(Pf)   var(Pf-Pc)    var(Pf)    kurtosis      check       cost #> --------------------------------------------------------------------------------------- #>  0   1.0021e+01  1.0021e+01  1.5672e+02  1.5672e+02  0.0000e+00  0.0000e+00  1.0000e+00  #>  1   2.1833e-01  1.0449e+01  4.6667e+00  2.0343e+02  2.4773e+01  2.4139e-01  4.0000e+00  #>  2   1.8179e-02  1.0370e+01  1.0011e+00  2.1206e+02  9.9908e+00  1.0824e-01  1.6000e+01  #>  3   2.2204e-03  1.0304e+01  2.7158e-01  2.0436e+02  7.8956e+00  7.7475e-02  6.4000e+01  #>  4   2.4869e-03  1.0291e+01  6.5776e-02  2.1107e+02  6.1242e+00  1.7318e-02  2.5600e+02  #>  5   1.8235e-03  1.0488e+01  1.7803e-02  2.2009e+02  5.9747e+00  2.2078e-01  1.0240e+03  #>  #> ****************************************************** #> *** Linear regression estimates of MLMC parameters *** #> ****************************************************** #>  #>  alpha = 1.667722  (exponent for MLMC weak convergence) #>  beta  = 1.999615  (exponent for MLMC variance)  #>  gamma = 2.000000  (exponent for MLMC cost)  #>  #> *****************************  #> *** MLMC complexity tests ***  #> *****************************  #>  #>   eps      value    mlmc_cost   std_cost  savings     N_l  #> -----------------------------------------------------------  #> 0.0250  1.0447e+01  1.348e+06  2.790e+07    20.70    680294     57099     13650      3453 #> 0.1000  1.0444e+01  6.532e+04  4.524e+05     6.93     36378      3235      1000 #>   tst <- mlmc.test(mcqmc06_l, N=10000,                  L=8, N0=1000,                  eps.v=c(0.025, 0.1),                  Lmin=2, Lmax=10, option=1) #>  #> ********************************************************** #> *** Convergence tests, kurtosis, telescoping sum check *** #> *** using N = 10000 samples                            *** #> ********************************************************** #>  #>  l   ave(Pf-Pc)    ave(Pf)   var(Pf-Pc)    var(Pf)    kurtosis      check       cost #> --------------------------------------------------------------------------------------- #>  0   9.9360e+00  9.9360e+00  1.9527e+02  1.9527e+02  0.0000e+00  0.0000e+00  1.0000e+00  #>  1   1.8229e-01  1.0193e+01  1.4497e-01  2.0400e+02  3.6176e+01  8.7405e-02  2.0000e+00  #>  2   1.0372e-01  1.0367e+01  4.3853e-02  2.1466e+02  4.5068e+01  8.0506e-02  4.0000e+00  #>  3   5.4179e-02  1.0507e+01  1.2379e-02  2.2235e+02  2.0586e+01  9.5376e-02  8.0000e+00  #>  4   2.7786e-02  1.0437e+01  3.1113e-03  2.1664e+02  1.4431e+01  1.0887e-01  1.6000e+01  #>  5   1.3935e-02  1.0482e+01  8.0288e-04  2.1402e+02  1.2392e+01  3.4561e-02  3.2000e+01  #>  6   7.4023e-03  1.0784e+01  2.1957e-04  2.2487e+02  9.9664e+00  3.3208e-01  6.4000e+01  #>  7   3.4586e-03  1.0411e+01  5.1474e-05  2.1342e+02  9.0658e+00  4.2431e-01  1.2800e+02  #>  8   1.7082e-03  1.0161e+01  1.2897e-05  2.0747e+02  9.8193e+00  2.8939e-01  2.5600e+02  #>  #> ****************************************************** #> *** Linear regression estimates of MLMC parameters *** #> ****************************************************** #>  #>  alpha = 0.967932  (exponent for MLMC weak convergence) #>  beta  = 1.931833  (exponent for MLMC variance)  #>  gamma = 1.000000  (exponent for MLMC cost)  #>  #> *****************************  #> *** MLMC complexity tests ***  #> *****************************  #>  #>   eps      value    mlmc_cost   std_cost  savings     N_l  #> -----------------------------------------------------------  #> 0.0250  1.0438e+01  5.452e+05  3.070e+07    56.32    484421      9121      3530      1350       499       178        61 #> 0.1000  1.0320e+01  3.548e+04  4.622e+05    13.03     28515      1000      1000        70        25 #>"},{"path":"https://mlmc.louisaslett.com/reference/opre_l.html","id":null,"dir":"Reference","previous_headings":"","what":"Financial options using an Euler-Maruyama discretisation — opre_l","title":"Financial options using an Euler-Maruyama discretisation — opre_l","text":"Financial options based scalar geometric Brownian motion Heston models, similar Mike Giles' original 2008 Operations Research paper, using Euler-Maruyama discretisation","code":""},{"path":"https://mlmc.louisaslett.com/reference/opre_l.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Financial options using an Euler-Maruyama discretisation — opre_l","text":"","code":"opre_l(l, N, option)"},{"path":"https://mlmc.louisaslett.com/reference/opre_l.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Financial options using an Euler-Maruyama discretisation — opre_l","text":"l level simulated. N number samples computed. option option type, 1 5. options : 1 = European call;  2 = Asian call;  3 = lookback call;  4 = digital call;  5 = Heston model.","code":""},{"path":"https://mlmc.louisaslett.com/reference/opre_l.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Financial options using an Euler-Maruyama discretisation — opre_l","text":"function based GPL-2 'Matlab' code Mike Giles.","code":""},{"path":"https://mlmc.louisaslett.com/reference/opre_l.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Financial options using an Euler-Maruyama discretisation — opre_l","text":"M.B. Giles. Multilevel Monte Carlo path simulation. Operations Research, 56(3):607-617, 2008.","code":""},{"path":"https://mlmc.louisaslett.com/reference/opre_l.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Financial options using an Euler-Maruyama discretisation — opre_l","text":"Louis Aslett <louis.aslett@durham.ac.uk> Mike Giles <Mike.Giles@maths.ox.ac.uk> Tigran Nagapetyan <nagapetyan@stats.ox.ac.uk>","code":""},{"path":"https://mlmc.louisaslett.com/reference/opre_l.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Financial options using an Euler-Maruyama discretisation — opre_l","text":"","code":"if (FALSE) { # \\dontrun{ # These are similar to the MLMC tests for the original # 2008 Operations Research paper, using an Euler-Maruyama # discretisation with 4^l timesteps on level l. # # The differences are: # -- the plots do not have the extrapolation results # -- two plots are log_2 rather than log_4 # -- the new MLMC driver is a little different # -- switch to X_0=100 instead of X_0=1  M    <- 4 # refinement cost factor N0   <- 1000 # initial samples on coarse levels Lmin <- 2 # minimum refinement level Lmax <- 6 # maximum refinement level  test.res <- list() for(option in 1:5) {   if(option==1) {     cat(\"\\n ---- Computing European call ---- \\n\")     N      <- 2000000 # samples for convergence tests     L      <- 5 # levels for convergence tests     Eps    <- c(0.005, 0.01, 0.02, 0.05, 0.1)   } else if(option==2) {     cat(\"\\n ---- Computing Asian call ---- \\n\")     N      <- 2000000 # samples for convergence tests     L      <- 5 # levels for convergence tests     Eps    <- c(0.005, 0.01, 0.02, 0.05, 0.1)   } else if(option==3) {     cat(\"\\n ---- Computing lookback call ---- \\n\")     N      <- 2000000 # samples for convergence tests     L      <- 5 # levels for convergence tests     Eps    <- c(0.01, 0.02, 0.05, 0.1, 0.2)   } else if(option==4) {     cat(\"\\n ---- Computing digital call ---- \\n\")     N      <- 3000000 # samples for convergence tests     L      <- 5 # levels for convergence tests     Eps    <- c(0.02, 0.05, 0.1, 0.2, 0.5)   } else if(option==5) {     cat(\"\\n ---- Computing Heston model ---- \\n\")     N      <- 2000000 # samples for convergence tests     L      <- 5 # levels for convergence tests     Eps    <- c(0.005, 0.01, 0.02, 0.05, 0.1)   }    test.res[[option]] <- mlmc.test(opre_l, M, N, L, N0, Eps, Lmin, Lmax, option=option)    # print exact analytic value, based on S0=K   T   <- 1   r   <- 0.05   sig <- 0.2   K   <- 100    d1  <- (r+0.5*sig^2)*T / (sig*sqrt(T))   d2  <- (r-0.5*sig^2)*T / (sig*sqrt(T))    if(option==1) {     val <- K*( pnorm(d1) - exp(-r*T)*pnorm(d2) )     cat(sprintf(\"\\n Exact value: %f, MLMC value: %f \\n\", val, test.res[[option]]$P[1]))   } else if(option==3) {     k   <- 0.5*sig^2/r     val <- K*( pnorm(d1) - pnorm(-d1)*k - exp(-r*T)*(pnorm(d2) - pnorm(d2)*k) )     cat(sprintf(\"\\n Exact value: %f, MLMC value: %f \\n\", val, test.res[[option]]$P[1]))   } else if(option==4) {     val <- K*exp(-r*T)*pnorm(d2)     cat(sprintf(\"\\n Exact value: %f, MLMC value: %f \\n\", val, test.res[[option]]$P[1]))   }    # plot results   plot(test.res[[option]]) } } # }  # The level sampler can be called directly to retrieve the relevant level sums: opre_l(l=7, N=10, option=1) #> $sums #> [1] -3.981864e-02  7.417176e-03 -5.456805e-04  4.596348e-05  5.937773e+01 #> [6]  1.369603e+03 #>  #> $cost #> [1] 163840 #>"},{"path":"https://mlmc.louisaslett.com/reference/plot.mlmc.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot an mlmc.test object — plot.mlmc.test","title":"Plot an mlmc.test object — plot.mlmc.test","text":"Produces diagnostic plots result mlmc.test function call.","code":""},{"path":"https://mlmc.louisaslett.com/reference/plot.mlmc.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot an mlmc.test object — plot.mlmc.test","text":"","code":"# S3 method for class 'mlmc.test' plot(x, which = \"all\", cols = NA, ...)"},{"path":"https://mlmc.louisaslett.com/reference/plot.mlmc.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot an mlmc.test object — plot.mlmc.test","text":"x mlmc.test object produced call mlmc.test function. vector strings specifying plots produce, \"\" diagnostic plots.  options : \"var\" = \\(log_2\\) variance level;  \"mean\" = \\(log_2\\) mean level;  \"consis\" = consistency level;  \"kurt\" = kurtosis level;  \"Nl\" = \\(log_2\\) number samples level;  \"cost\" = \\(log_10\\) cost \\(log_10\\) epsilon (accuracy).  cols number columns across plot override default value. ... additional arguments passed plotting functions.","code":""},{"path":"https://mlmc.louisaslett.com/reference/plot.mlmc.test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot an mlmc.test object — plot.mlmc.test","text":"Louis Aslett <louis.aslett@durham.ac.uk>","code":""},{"path":"https://mlmc.louisaslett.com/reference/plot.mlmc.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot an mlmc.test object — plot.mlmc.test","text":"","code":"if (FALSE) { # \\dontrun{ tst <- mlmc.test(opre_l, N=2000000,                  L=5, N0=1000,                  eps.v=c(0.005, 0.01, 0.02, 0.05, 0.1),                  Lmin=2, Lmax=6, option=1) tst plot(tst) } # }"}]
